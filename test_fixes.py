#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Ç–µ–π –∏ –∏–º–ø–æ—Ä—Ç–æ–≤
"""
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend/app –≤ PYTHONPATH
backend_app_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'backend', 'app'))
sys.path.insert(0, backend_app_path)

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from celery.result import AsyncResult
        print("‚úÖ AsyncResult –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ AsyncResult: {e}")
    
    try:
        from celery.exceptions import Revoked
        print("‚úÖ Revoked –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ö†Ô∏è  Revoked –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Celery): {e}")
    
    try:
        from tasks import train_task
        print("‚úÖ train_task –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ train_task: {e}")
    
    try:
        from utils.training_status import training_status_manager
        print("‚úÖ training_status_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ training_status_manager: {e}")

def test_paths():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π"""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏
    config_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'config_refined.yaml'))
    print(f"Config path: {config_path}")
    print(f"Config exists: {'‚úÖ' if os.path.exists(config_path) else '‚ùå'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    backend_dir = os.path.join(os.path.dirname(__file__), 'backend', 'app')
    training_files_dir = os.path.join(backend_dir, 'training_files')
    models_dir = os.path.join(backend_dir, 'models')
    results_dir = os.path.join(backend_dir, 'results')
    
    print(f"Training files dir: {training_files_dir}")
    print(f"Training files exists: {'‚úÖ' if os.path.exists(training_files_dir) else '‚ùå'}")
    
    print(f"Models dir: {models_dir}")
    print(f"Models exists: {'‚úÖ' if os.path.exists(models_dir) else '‚ùå'}")
    
    print(f"Results dir: {results_dir}")
    print(f"Results exists: {'‚úÖ' if os.path.exists(results_dir) else '‚ùå'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    pretrained_models_dir = os.path.join(os.path.dirname(__file__), 'pretrained_models', 'chronos-bolt-base')
    print(f"Pretrained models dir: {pretrained_models_dir}")
    print(f"Pretrained models exists: {'‚úÖ' if os.path.exists(pretrained_models_dir) else '‚ùå'}")

if __name__ == "__main__":
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—É—Ç–µ–π –∏ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    test_imports()
    test_paths()
    print("\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
